The ``4-print_square`` module
=============================

Using ``print_square``
----------------------

Check for module docstring:
    >>> m = __import__("4-print_square").__doc__
    >>> len(m) > 1
    True

Check for function import from the module:
    >>> print_square = __import__("4-print_square").print_square

Check for function docstring:
    >>> f = __import__("4-print_square").print_square.__doc__
    >>> len(f) > 1
    True

Check for no args:
    >>> print_square()
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'

Check for more than 1 arg
    >>> print_square(1, 2)
    Traceback (most recent call last):
    ...
    TypeError: print_square() takes 1 positional argument but 2 were given

Check for passing None:
    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Check for positive ints:
    >>> print_square(4)
    ####
    ####
    ####
    ####
    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    >>> print_square(0)
	 
    >>> print_square(1)
    #

Check for negative ints:
    >>> print_square(-1)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

Check for non-number types:
    >>> print_square((4,1))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
    >>> print_square("5")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
    >>> print_square(False)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Check for non-int number types:
    >>> print_square(1.0)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
    >>> print_square(-5.5)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
