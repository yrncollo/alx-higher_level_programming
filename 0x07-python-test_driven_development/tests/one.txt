The ``101-lazy_matrix_mul`` module
======================

This is a text file in reStructuredText format to test the above module.

Using ``lazy_matrix_mul``
-------------------

First import ``lazy_matrix_mul`` from the ``101-lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:


This function requires 2 arguments.

    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


    >>> lazy_matrix_mul([[5]])
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'


It should not work if the arguments are not not a non empty list of non empty lists

    >>> def test_exceptions(func, tests):
    ...     for test in tests:
    ...         try:
    ...             func(test[0], test[1])
    ...         except Exception as e:
    ...             pass
    ...		    print("Failed with {}: {}".format(type(e).__name__, e))
    ...         else:
    ...             print("NO EXCEPTION for input {} and {}".format(test[0], test[1]))
    ... 

    >>> tests = [(2.3, "a string"), (1.2, [1, 2]), (1.5, set("abracadabra")), (5, {"a":1, "b":4.5}), (4, range(5)), (3.45, b'byte literal'), (3, None), ([[1, 2], [1, 2]], "a string"), ([[1, 2], [1, 2]], [1, 2]), ([[1, 2], [1, 2]], set("abracadabra")), ([[1, 2], [1, 2]], {"a":1, "b":4.5}), ([[1, 2], [1, 2]], range(5)), ([[1, 2], [1, 2]], b'byte literal'), ([[1, 2], [1, 2]], None)] 

Arguments are not both lists of lists

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with TypeError: Object arrays are not currently supported
    Failed with TypeError: Object arrays are not currently supported
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with TypeError: Object arrays are not currently supported
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    NO EXCEPTION for input [[1, 2], [1, 2]] and [1, 2]
    Failed with TypeError: Object arrays are not currently supported
    Failed with TypeError: Object arrays are not currently supported
    Failed with ValueError: shapes (2,2) and (5,) not aligned: 2 (dim 1) != 5 (dim 0)
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with TypeError: Object arrays are not currently supported


    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with TypeError: Object arrays are not currently supported
    Failed with TypeError: Object arrays are not currently supported
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with TypeError: Object arrays are not currently supported
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    NO EXCEPTION for input [1, 2] and [[1, 2], [1, 2]]
    Failed with TypeError: Object arrays are not currently supported
    Failed with TypeError: Object arrays are not currently supported
    Failed with ValueError: shapes (5,) and (2,2) not aligned: 5 (dim 0) != 2 (dim 0)
    Failed with ValueError: Scalar operands are not allowed, use '*' instead
    Failed with TypeError: Object arrays are not currently supported


An argument is an empty list
    >>> tests = [([], [[1, 2], [1, 2]]), ([[]], [[1, 2], [1, 2]]), ([[], []], [[1, 2], [1, 2]]), ([[]], [[]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)
    Failed with ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)
    Failed with ValueError: shapes (2,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)
    Failed with ValueError: shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0)


    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Failed with ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)
    Failed with ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)
    NO EXCEPTION for input [[1, 2], [1, 2]] and [[], []]
    Failed with ValueError: shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0)


It should not work if the matrixes are not matrixes and contain only floats or ints

In one of the arguments, an element is not a number (int or float)
Should automate that
    >>> tests = [([[1, 2], [1, 2]], [[1, 2], ["a", 2]]), ([[1, 2], [1, 2]], [[1, 2], [[1, 2], 2]]), ([[1, 2], [1, 2]], [[1, 2], [True, 2]]), ([[1, 2], [1, 2]], [[1, 2], [1, None]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with TypeError: invalid data type for einsum
    Failed with ValueError: setting an array element with a sequence.
    NO EXCEPTION for input [[1, 2], [1, 2]] and [[1, 2], [True, 2]]
    Failed with TypeError: Object arrays are not currently supported


    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Failed with TypeError: invalid data type for einsum
    Failed with ValueError: setting an array element with a sequence.
    NO EXCEPTION for input [[1, 2], [True, 2]] and [[1, 2], [1, 2]]
    Failed with TypeError: Object arrays are not currently supported


In one of the arguments, we have missing/extra elements
    >>> tests = [([[1, 2], [1, 2]], [[1, 2], [2]]), ([[1, 2], [1, 2]], [[1, 2], [1, 2], [2]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError: setting an array element with a sequence.
    Failed with ValueError: setting an array element with a sequence.

    >>> test_exceptions(lazy_matrix_mul, [(test[1], test[0]) for test in tests])
    Failed with ValueError: setting an array element with a sequence.
    Failed with ValueError: setting an array element with a sequence.



Matrixes can be multiplied if the number of rows of first = nb of cols of the second
Otherwise
    >>> tests = [([[1, 2, 3], [1, 2, 3]], [[1, 2], [1, 2]]), ([[1, 2], [1, 2]], [[1, 2, 3], [1, 2, 3], [3, 4, 5]])]

    >>> test_exceptions(lazy_matrix_mul, tests)
    Failed with ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
    Failed with ValueError: shapes (2,2) and (3,3) not aligned: 2 (dim 1) != 3 (dim 0)

Now, it should work for ints and floats in matrixes

    >>> def test_good(func, tests):
    ...     for test in tests:
    ...         print(func(test[0], test[1]))

    >>> tests = [([[1.5425, 5.252], [646, 34]], [[1, 2, 3.45], [5, 68, -5.67]]), ([[23, 45.64, 3], [235, -53, 5], [0, 0, 0]], [[45, -6.325, 7], [-5245, 54, 21], [1, 2, 3]])]
    >>> test_good(lazy_matrix_mul, tests)
    [[   27.8025     360.221      -24.457215]
     [  816.        3604.        2035.92    ]]
    [[-238343.8      2325.085    1128.44 ]
     [ 288565.      -4338.375     547.   ]
     [      0.          0.          0.   ]]

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> lazy_matrix_mul(matrix[0], matrix[0])
    14

